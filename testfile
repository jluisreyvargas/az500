upstream dashboard {
    # Se resolverÃ¡ en runtime con la variable $ACTIVE_APP
    server ${ACTIVE_APP}:3000;
}

server {
    listen 80;

    location / {
        proxy_pass http://dashboard;
    }
}

#### Docker Compose:

environment:
      - ACTIVE_APP=${ACTIVE_APP:-blue-app} # valor por defecto Blue

### Script bash para cambiar:

#!/bin/bash
set -e

if [ -z "$1" ]; then
  echo "Uso: $0 [blue|green]"
  exit 1
fi

if [ "$1" = "blue" ]; then
  ACTIVE_APP="blue-app"
elif [ "$1" = "green" ]; then
  ACTIVE_APP="green-app"
else
  echo "Error: opciÃ³n invÃ¡lida. Usa 'blue' o 'green'."
  exit 1
fi

echo ">>> Cambiando a $ACTIVE_APP ..."
ACTIVE_APP=$ACTIVE_APP docker compose up -d nginx

echo ">>> Nginx ahora enruta hacia $ACTIVE_APP âœ…"


### nginx
events {
    worker_connections 1024;
}

http {
    upstream backend {
        # Por defecto apunta a Blue (versiÃ³n estÃ¡tica)
        server blue-app:3000;
        
        # Para cambiar a Green, comentar lÃ­nea anterior y descomentar:
        # server green-app:3000;
    }

    server {
        listen 80;




### docker test puertos>

docker ps --format "table {{.Names}}\t{{.Ports}}"
NAMES                       PORTS
eu-localstack-nginx-1       0.0.0.0:80->80/tcp, [::]:80->80/tcp
eu-localstack-green-app-1   3000/tcp
eu-localstack-blue-app-1    3000/tcp
localstack                  0.0.0.0:4510-4559->4510-4559/tcp, [::]:4510-4559->4510-4559/tcp, 0.0.0.0:4566->4566/tcp, [::]:4566->4566/tcp
        # ConfiguraciÃ³n general para Next.js
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Headers adicionales para Next.js
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        

        # Favicon y otros assets
        location ~* \.(ico|css|js|gif|jpe?g|png|svg|woff2?|ttf|eot)$ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            
            # Cache para assets
            expires 30d;
            add_header Cache-Control "public";
        }
    }
}


### nginx.conf.template

 upstream backend {
    # Se resolverÃ¡ en runtime con la variable $ACTIVE_APP
    server ${ACTIVE_APP}:3000;
}

server {
    listen 80;

    location / {
        proxy_pass http://backend;
    }
}


### Docker Compose Completo>

version: "3.8"

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      - ACTIVE_APP=${ACTIVE_APP:-blue-app} # valor por defecto Blue  
    depends_on:
      - blue-app
      - green-app
    restart: unless-stopped
    networks:
      - la-huella-network

  blue-app:
    build: .
    environment:
      - CURRENT_STAGE=1
      - USE_STATIC_DASHBOARD=true
      - NODE_ENV=production
    expose:
      - "3000"
    #ports:
    #  - "3001:3000"
    restart: unless-stopped
    networks:
      - la-huella-network

  green-app:
    build: .
    environment:
      - CURRENT_STAGE=2
      - USE_STATIC_DASHBOARD=false
      - NODE_ENV=production
      - AWS_ENDPOINT_URL=http://localstack:4566   # ðŸ‘ˆ usar hostname del contenedor
      - AWS_REGION=eu-west-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    expose:
      - "3000"
    #ports:
    #  - "3002:3000"
    restart: unless-stopped
    networks:
      - la-huella-network

networks:
  la-huella-network:
    external: true
